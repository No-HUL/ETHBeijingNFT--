/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    Raffle: {
      address: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "burnNft",
          inputs: [
            {
              name: "nftAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "enterRaffle",
          inputs: [],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "getBalance",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPlayer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRaffleState",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "enum Raffle.RaffleState",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftCheckIn",
          inputs: [
            {
              name: "nftAddress",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "selectWinner",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdrawBalance",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "BalanceWithdrawn",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NewEntry",
          inputs: [
            {
              name: "player",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NftChecked",
          inputs: [
            {
              name: "nftAddress",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RaffleEnded",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "RaffleStarted",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "WinnerSelected",
          inputs: [
            {
              name: "winner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Raffle__BurnNftNotEnough",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__MustBeOwner",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__MustCheckIn",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__NoBalanceToWithdraw",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__NoPlayer",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__PrizePoolCantBeZero",
          inputs: [],
        },
        {
          type: "error",
          name: "Raffle__RaffleNotOpen",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
    },
    MockNft: {
      address: "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name_",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol_",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getApproved",
          inputs: [
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "initialize",
          inputs: [
            {
              name: "name_",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol_",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "ownerOf",
          inputs: [
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "_owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_approved",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "_owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "_from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "_tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {
        approve: "lib/forge-std/src/mocks/MockERC721.sol",
        balanceOf: "lib/forge-std/src/mocks/MockERC721.sol",
        getApproved: "lib/forge-std/src/mocks/MockERC721.sol",
        initialize: "lib/forge-std/src/mocks/MockERC721.sol",
        isApprovedForAll: "lib/forge-std/src/mocks/MockERC721.sol",
        name: "lib/forge-std/src/mocks/MockERC721.sol",
        ownerOf: "lib/forge-std/src/mocks/MockERC721.sol",
        safeTransferFrom: "lib/forge-std/src/mocks/MockERC721.sol",
        setApprovalForAll: "lib/forge-std/src/mocks/MockERC721.sol",
        supportsInterface: "lib/forge-std/src/mocks/MockERC721.sol",
        symbol: "lib/forge-std/src/mocks/MockERC721.sol",
        tokenURI: "lib/forge-std/src/mocks/MockERC721.sol",
        transferFrom: "lib/forge-std/src/mocks/MockERC721.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
